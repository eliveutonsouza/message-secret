// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth.js required models
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

// Application models
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Suporte opcional a WebAuthn

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Application relations
  letters Letter[]

  @@map("users")
}

model Letter {
  id             String        @id @default(cuid())
  userId         String
  title          String?
  content        String
  releaseDate    DateTime
  isFavorite     Boolean       @default(false)
  status         LetterStatus  @default(DRAFT)
  paymentStatus  PaymentStatus @default(PENDING)
  paymentId      String?
  uniqueLink     String        @unique
  accessPassword String? // Senha opcional para acesso
  maxViews       Int? // Limite máximo de visualizações
  viewCount      Int           @default(0) // Contador de visualizações
  expiresAt      DateTime? // Data de expiração do link
  isPublic       Boolean       @default(false) // Se pode ser compartilhada publicamente
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([uniqueLink])
  @@index([releaseDate])
  @@map("letters")
}

enum LetterStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

// Suporte opcional a WebAuthn
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
